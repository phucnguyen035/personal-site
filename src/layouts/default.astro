---
import '@fontsource-variable/inter';
import { ViewTransitions } from 'astro:transitions';
import { Picture } from 'astro:assets';
import me from '../assets/me_portrait.png';
import ThemeButton from '../components/ThemeButton.astro';
import Button from '../components/Button.astro';
import { cx } from '../utils/cx';

const links = [
  { label: 'Home', url: '/' },
  { label: 'About', url: '/about/' },
  { label: 'Projects', url: '/projects/' },
  { label: 'Blog', url: '/blog/' },
];

const { pathname } = Astro.url;

type Props = {
  title: string;
};

const { title } = Astro.props;
---

<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="viewport" content="width=device-width" />
    <meta name="description" content="Personal website of Phúc Nguyễn" />
    <meta name="generator" content={Astro.generator} />
    <title>{`${title} | Phúc Nguyễn`}</title>
    <ViewTransitions />
    <script is:inline>
    if (localStorage.getItem('theme')) {
      document.documentElement.classList.add(localStorage.getItem('theme'));
    } else if (window.matchMedia('(prefers-color-scheme: dark)').matches) {
      document.documentElement.classList.add('dark');
    }
    </script>
  </head>

  <body class="bg-primary-700/10 dark:bg-primary-950 dark:text-primary-50">
    <div
      class="container relative mx-auto grid min-h-screen grid-rows-[4rem_auto] border-x border-primary-800/10 bg-primary-50 supports-dvh:min-h-[100dvh] dark:bg-primary-900/20"
    >
      <header
        class="sticky top-4 z-20 flex items-center px-8 transition-transform duration-500 lg:top-0 lg:pt-4"
      >
        <div class="flex-1">
          <a href="/" transition:persist>
            <Picture
              src={me}
              alt="Image of Phúc Nguyễn"
              densities={[1, 2]}
              formats={['avif', 'webp']}
              width={64}
              height={64}
              class="flex h-12 w-12 rounded-full transition-transform hover:scale-110"
            />
          </a>
        </div>
        <div class="flex-1">
          <ul
            class="hidden justify-evenly rounded-2xl capitalize shadow-md shadow-primary-950/20 backdrop-blur dark:bg-primary-800/10 dark:shadow-primary-600/50 lg:flex"
          >
            {
              links.map(({ label, url }) => (
                <li>
                  <a
                    href={url}
                    class={cx(
                      'block py-2 text-sm font-medium hover:text-primary-500',
                      pathname === url && 'text-primary-600 hover:text-primary-600'
                    )}
                  >
                    {label}
                  </a>
                </li>
              ))
            }
          </ul>
        </div>
        <div class="flex flex-1 justify-end gap-x-2">
          <ThemeButton />
          <Button
            id="menu-toggle"
            type="button"
            class="group items-center justify-end lg:hidden"
            aria-expanded="false"
            aria-label="Open menu"
            aria-controls="mobile-menu"
          >
            <svg
              xmlns="http://www.w3.org/2000/svg"
              fill="none"
              viewBox="0 0 24 24"
              stroke-width="1.5"
              stroke="currentColor"
              class="h-7 w-7 group-aria-expanded:hidden lg:h-6 lg:w-6"
            >
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                d="M3.75 6.75h16.5M3.75 12h16.5m-16.5 5.25h16.5"></path>
            </svg>
            <svg
              xmlns="http://www.w3.org/2000/svg"
              fill="none"
              viewBox="0 0 24 24"
              stroke-width="1.5"
              stroke="currentColor"
              class="hidden h-7 w-7 group-aria-expanded:block lg:h-6 lg:w-6"
            >
              <path stroke-linecap="round" stroke-linejoin="round" d="M6 18L18 6M6 6l12 12"></path>
            </svg>
          </Button>
        </div>
      </header>
      <slot />
      <nav
        id="mobile-menu"
        aria-hidden="true"
        class="group fixed inset-0 backdrop-blur-sm aria-hidden:invisible lg:hidden"
      >
        <ul
          class="mx-8 mt-20 max-w-sm rounded-2xl bg-primary-50 p-4 opacity-100 shadow shadow-primary-950/20 transition-opacity group-aria-hidden:invisible group-aria-hidden:opacity-0 dark:bg-primary-900 dark:shadow-primary-600/50 sm:ml-auto"
        >
          {
            links.map(({ label, url }) => (
              <li>
                <a
                  href={url}
                  class="block py-3 font-medium transition-colors hover:text-primary-600"
                  class:list={[{ 'text-primary-600': pathname === url }]}
                >
                  {label}
                </a>
              </li>
            ))
          }
        </ul>
      </nav>
    </div>
    <script>
      function throttle<T extends Function>(func: T, delay: number = 300): T {
        let lastCall = 0;
        return function (...args: unknown[]) {
          const now = new Date().getTime();
          if (now - lastCall < delay) {
            return;
          }
          lastCall = now;
          return func(...args);
        } as unknown as T;
      }

      document.addEventListener('astro:page-load', () => {
        const mobileMenu = document.querySelector<HTMLDivElement>('#mobile-menu');
        const mobileMenuToggle = document.querySelector<HTMLButtonElement>('#menu-toggle');

        document.documentElement.addEventListener('click', (e) => {
          if (!mobileMenu || mobileMenu.getAttribute('aria-hidden') === 'true') {
            return;
          }

          if (!mobileMenu.firstChild?.contains(e.target as HTMLElement)) {
            mobileMenuToggle?.setAttribute('aria-expanded', 'false');
            mobileMenu.setAttribute('aria-hidden', 'true');
          }
        });

        mobileMenuToggle?.addEventListener('click', (e) => {
          e.preventDefault();
          e.stopImmediatePropagation();

          mobileMenuToggle.setAttribute(
            'aria-expanded',
            mobileMenuToggle.getAttribute('aria-expanded') === 'false' ? 'true' : 'false'
          );

          mobileMenu?.setAttribute(
            'aria-hidden',
            mobileMenu.getAttribute('aria-hidden') === 'true' ? 'false' : 'true'
          );
        });

        const THRESHOLD = 300;
        let lastScrollTop = 0;
        window.addEventListener(
          'scroll',
          throttle(() => {
            const header = document.querySelector('header');
            if (!header) {
              return;
            }

            let scrollTop = window.scrollY;
            if (scrollTop > lastScrollTop && scrollTop > THRESHOLD) {
              header.classList.add('-translate-y-20');
            } else {
              header.classList.remove('-translate-y-20');
            }

            lastScrollTop = scrollTop;
          })
        );
      });
    </script>
  </body>
</html>
